set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix sqlite_fuzz_test

proc db_exec {sql} {
  global db
  sqlite_db_inc_ioerr db
  set result {}
  if {$db ne ""} {
    set result $sqlite_db_eval db $sql
    if {$result eq ""} {
      sqlite_result_reset result
      set result {}
    } else {
      set result $sqlite_result_array result
    }
  }
  set sqlite_db_ioerrcnt db
  return $result
}

do_execsql_test 1.0 {
  CREATE TABLE data(
    id        PRIMARY KEY,
    info      NOT NULL DEFAULT 'default',
    created   NOT NULL DEFAULT 1643723400,
    updated   NOT NULL DEFAULT 1643723400
  );
  CREATE INDEX idx_data_id ON data(id);
  INSERT INTO data(id, info, created, updated) VALUES
   (1, 'value1', 1643713400, 1643713400);
  INSERT INTO data(id, info, created, updated) VALUES
   (2, 'value2', 1643713400, 1643713400);
  INSERT INTO data(id, info, created, updated) VALUES
   (3, 'value3', 1643713400, 1643713400);
}

set testid 1
do_execsql_test $testid {
  INSERT INTO data(id, info, created, updated)
  VALUES(
    4, 'value4', 1643713400, 1643713400
  );
  SELECT info FROM data;
} {value1 value2 value3 value4}

do_test $testid {
  execsql {
    SELECT rowid FROM data WHERE id=4
    }
  } {4}
  list
  queryplan

do_execsql_test $testid {
  UPDATE data
  SET info_NULL
  WHERE created_NULL

} {1 {syntax error in UPDATE WHERE clause}}

  unset testid

  foreach row {
       list 3 3
       list 7 4
  } {
        set testid $row
        incr testid
        set SQL {
            SELECT COUNT(*) FROM data
            WHERE rowid = 3
            }
        set db_value 3
        do_test $testid {
            set result  $db_exec $SQL
            if {$result ne $db_value} {
                 return "result: $result, wanted: $db_value" $result
            }
        } {1}
        unset testid
  }

finish_test