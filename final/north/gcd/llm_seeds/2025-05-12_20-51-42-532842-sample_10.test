set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix fuzz

proc fuzz_func {s} {
  return $s
}

proc fuzz_func2 {arg} {
  if {$arg eq "string"} {return "fuzzed string"}
  if {$arg eq "int"} {return 123}
  return ""
}

proc create_table {db} {
  eval $db {
    CREATE TABLE test_table(
      id PRIMARY KEY,
      name,
      description
    );
  }
  return
}

proc test_insert {db value} {
  eval $db {
    INSERT INTO test_table VALUES(1, 'test_name', 'test_description');
    INSERT INTO test_table VALUES(2, '$value', 'test_description');
  }
  return
}

do_test fuzz-1.1 {
  set db_file fuzz_test
  sqlite3 db $db_file
  select {catch {create_table db}}
} {0}

do_test fuzz-1.2 {
  test_insert db "fuzzed_insert"
  execsql {
    SELECT * FROM test_table;
  }
} {1 test_name test_description 2 fuzzed_insert test_description}

do_execsql_test fuzz-1.3 {
  CREATE TABLE IFNOTEXISTStable_b(id PRIMARY KEY);
  BEGIN;
  INSERT INTO table_b VALUES(1);
  COMMIT;
} {0 {}}

do_test fuzz-2.1 {
  execsql {
    CREATE TABLE test_table_2(x);
    INSERT INTO test_table_2 VALUES(1, 2, 3);
  }
  execsql {PRAGMA table_info = 'test_table_2'} {1 {} {} {} 0 {X}}
} {1 X 0 0 0 1 {} 0 0 0 1 {} 0 0 0 1 {} 0 0 0}

do_test fuzz-3.1 {
  set db_file fuzzy_test
  sqlite3 db $db_file
  execsql {
    PRAGMA database_list;
  }
  select {execsql {SELECT name FROM sqlite_master WHERE type="table"}} {test_table table_b}
} {test_table table_b}

sqlite3 db fuzz_test
catch {db close}

finish_test