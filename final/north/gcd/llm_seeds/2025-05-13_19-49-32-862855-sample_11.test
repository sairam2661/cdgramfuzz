set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix transaction_locking

set ::timeout 60000
if { $::sqlite_options_no_memory } { set sqlite_options_no_memory 1 }

proc locking_proc {} {
  global lockingargs
  lappend lockingargs
  expr {5}
}

proc database_checkpoint {} {
  global db
  execsql {
    BEGIN DEFERRED TRANSACTION
    SELECT pg_size_prettypg_total_size FROM dba_data_files
  }
  checkpoint $db
  execsql {
    COMMIT
  }
}

do_test transaction_locking-1.1 {
  execsql {
    CREATE TABLE b(x);
    INSERT INTO b VALUES(5);
  }
  execsql {
    CREATE TABLE c(y);
    INSERT INTO c VALUES(6);
  }
} {}

do_execsql_test transaction_locking-1.2 {
  INSERT INTO b VALUES(7);
  INSERT INTO c VALUES(8);
} {}

do_execsql_test transaction_locking-1.3 {
  BEGIN;
  ROLLBACK;
  SELECT count(*) FROM c;
} {1}

ifcapable wal {
  catchsql {PRAGMA journal_mode = 'WAL'}
} {0 {journal_mode set to wal}}
delete_all_databases

proc locking_function {} {
  set fd1 tmp1
  set fd2 tmp2
  set fd3 test3

  set lock1 0
  set lock2 0
  set lock3 0

  db eval {PRAGMA lock_protocol}
  if { $::sqlite_options_lockprot} { set lock1 1 }

  do_execsql_test locking_function_1 {
    INSERT INTO b VALUES(9);
    BEGIN;
    INSERT INTO c VALUES(10);
    SELECT count(*) FROM c;
    INSERT INTO c VALUES(11);
    ROLLBACK;
    COMMIT;
  }{}

  do_filesystem_test locking_function_2 {
    OPEN fd1 tmp2
    OPEN fd2 test2
    SELECT count FROM c WHERE x IN fd1 FD2
  }}

testvfs tvfs {
  sqlite_vfs_register tvfs
}
testvfs vfs2 {
  sqlite_vfs_register vfs2
}
do_filesystem_test locking_function_3 {
  SELECT count(*) FROM test_vfs WHERE c=x;
}

finish_test