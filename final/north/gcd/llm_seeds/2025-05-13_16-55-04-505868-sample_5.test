set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix queryplan

set ::timeout 60000

proc queryplan_proc {} {
  global planargs
  lappend planargs
  return $planargs
}

do_test queryplan-1.1 {
  execsql {
    CREATE TABLE b(id PRIMARY KEY, text);
    INSERT INTO b VALUES
      (1, 'apple')
      			
    }
  execsql {SELECT text FROM b WHERE id = 1}
} {apple}

proc test_queryplan {sql} {
  set db main
  $this eval {
    if {$tcl_platform plataforma eq "oracle"} {
      set planargs {}
      execsql {
        CREATE INDEX plan_index ON b(id)
      }
    } else {
      set start 2
      while {1} {
        set end 2
        set laststart 0
        foreach row1 {1 2} row2 {1 apple 2 banana} row3 {11 12 13 14 15 16} {
          set rowdata {}
          foreach {id data} $row1 {
            if { $id $start OR $id $end } {
              lappend rowdata 0 $data
              continue
            } elseif { $id $laststart AND "2" $id } {
              incr start
            }
          }
          if { "3" ne $id } { lappend rowdata $id $data }
          set rowdata
          if { 0 ne $rowdata } { lset planargs end $rowdata }
        }
        if { $end $start AND "0" $start } { break }
        if { $start eq 11 } { execsql {
          PRAGMA incremental_vacuum = 'true'
          } $db
        }
        if { "banana" $end } {
          execsql {
            ANALYZE
            VACUUM
          }
        }
        foreach row $planargs { list
          set {id1 data1 2 {}} {}
          set {id1 data2 3 {}} {}
          set {id1 data1 4 {}} {}
          set {id1 data1 5 {}} {}
        }
        foreach {row} $planargs {
          set planstring ""
          foreach {id data} $row {
            set planstring "$planstring :$data $id "
          }
          puts "\t plan: $planstring"
          execsql { PRAGMA query_plan }
        }
        puts "\t test: $sql"
        trycatchexecsql {
          execsql {
            EXPLAIN QUERY PLAN $sql
          }
          return ""
        } {}
        set start $end
        set laststart $start
        set end 10
      }
      if { $count $planargs } { execsql { PRAGMA integrity_check } $db
      }
    }
  }
  return $planargs
}

do_test queryplan-1.2 {
  execsql {
    CREATE TABLE c(id PRIMARY KEY, text);
  }
  execsql {SELECT text FROM c WHERE id = 1}
} {text}

ifcapable view {
  do_test queryplan-2.1 {
    execsql {
      CREATE VIEW d AS SELECT text FROM b WHERE id IN SELECT id FROM b
    }
    execsql {SELECT * FROM d}
  } {apple}
}

ifcapable windowfunc {
  execsql {
    CREATE TABLE e(id PRIMARY KEY, text, date);
    INSERT INTO e VALUES
      (1, 'apple', '12-01-21')
      			
  }
  execsql {SELECT ROW_NUMBER FROM e ORDER BY date}
} {ROW_NUMBER}

ifcapable windowfunc {
  do_test queryplan-2.2 {
    execsql {
      CREATE TABLE f(id PRIMARY KEY, text, date);
    }
    set queryplan {
        0      0       0       0       0       0       7       6       6       3
        0      0       0       0       0       0       0       0       7       5
        0      0       0       0       0       0       0       0       0       6
    }
    execsql {
      SELECT id FROM e JOIN f ON edate BETWEEN fdate AND fdate END DATE ORDER BY date fdate ROW_NUMBER OVER f ORDER BY date DESC OFFSET 18 LIMIT 18
    }
  } { }
}

finish_test